{"ast":null,"code":"var _jsxFileName = \"C:\\\\Research\\\\client-management-frontend\\\\FrontEnd\\\\client-management-dashboard\\\\src\\\\pages\\\\ClientListPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ClientList from '../components/ClientList';\nimport SearchBar from '../components/SearchBar';\nimport Pagination from '../components/Pagination';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ClientListPage = () => {\n  _s();\n  const history = useHistory();\n  const [clients, setClients] = useState([]);\n  const [searchTerm, setSearchTerm] = useState('');\n  const [currentPage, setCurrentPage] = useState(1);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState('');\n  const clientsPerPage = 10;\n\n  // Fetch clients from API\n  useEffect(() => {\n    const fetchClients = async () => {\n      try {\n        setLoading(true);\n        const response = await fetch('http://localhost:5001/client');\n        if (response.ok) {\n          const data = await response.json();\n          setClients(data);\n        } else {\n          setError('Failed to load clients');\n        }\n      } catch (error) {\n        setError('Error fetching clients');\n        console.error('Error fetching clients:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchClients();\n  }, []);\n\n  // Filter clients based on search term\n  const filteredClients = clients.filter(client => client.firstName.toLowerCase().includes(searchTerm.toLowerCase()) || client.lastName.toLowerCase().includes(searchTerm.toLowerCase()) || client.email.toLowerCase().includes(searchTerm.toLowerCase()));\n\n  // Calculate pagination\n  const indexOfLastClient = currentPage * clientsPerPage;\n  const indexOfFirstClient = indexOfLastClient - clientsPerPage;\n  const currentClients = filteredClients.slice(indexOfFirstClient, indexOfLastClient);\n  const totalPages = Math.ceil(filteredClients.length / clientsPerPage);\n  const handlePageChange = pageNumber => {\n    setCurrentPage(pageNumber);\n  };\n  const handleEditClient = client => {\n    // Check what field contains the ID\n    console.log('Edit client:', client);\n    console.log('Client ID:', client.id);\n    console.log('Customer ID:', client.customerId);\n\n    // Use customerId if that's what your API returns\n    const clientId = client.customerId || client.id;\n    history.push(`/edit/${clientId}`);\n  };\n  const handleDeleteClient = async id => {\n    try {\n      const response = await fetch(`http://localhost:5001/client?ClientID=${id}`, {\n        method: 'DELETE'\n      });\n      if (response.ok) {\n        // Remove client from state\n        setClients(clients.filter(client => (client.customerId || client.id) !== id));\n      } else {\n        setError('Failed to delete client');\n      }\n    } catch (error) {\n      setError('Error deleting client');\n      console.error('Error deleting client:', error);\n    }\n  };\n  const handleSearchChange = term => {\n    setSearchTerm(term);\n    setCurrentPage(1); // Reset to first page when searching\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading clients...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Client Management\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      style: {\n        color: 'red'\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchTerm: searchTerm,\n      onSearchChange: handleSearchChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(ClientList, {\n      clients: currentClients,\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: handlePageChange,\n      onEditClient: handleEditClient,\n      onDeleteClient: handleDeleteClient\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalPages: totalPages,\n      onPageChange: handlePageChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n};\n_s(ClientListPage, \"18TeVTVPUb5cthRCEhsBpR2XMrM=\", false, function () {\n  return [useHistory];\n});\n_c = ClientListPage;\nexport default ClientListPage;\nvar _c;\n$RefreshReg$(_c, \"ClientListPage\");","map":{"version":3,"names":["React","useState","useEffect","useHistory","ClientList","SearchBar","Pagination","jsxDEV","_jsxDEV","ClientListPage","_s","history","clients","setClients","searchTerm","setSearchTerm","currentPage","setCurrentPage","loading","setLoading","error","setError","clientsPerPage","fetchClients","response","fetch","ok","data","json","console","filteredClients","filter","client","firstName","toLowerCase","includes","lastName","email","indexOfLastClient","indexOfFirstClient","currentClients","slice","totalPages","Math","ceil","length","handlePageChange","pageNumber","handleEditClient","log","id","customerId","clientId","push","handleDeleteClient","method","handleSearchChange","term","children","fileName","_jsxFileName","lineNumber","columnNumber","style","color","onSearchChange","onPageChange","onEditClient","onDeleteClient","_c","$RefreshReg$"],"sources":["C:/Research/client-management-frontend/FrontEnd/client-management-dashboard/src/pages/ClientListPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport ClientList from '../components/ClientList';\nimport SearchBar from '../components/SearchBar';\nimport Pagination from '../components/Pagination';\nimport { Client } from '../types/Client';\n\nconst ClientListPage: React.FC = () => {\n    const history = useHistory();\n    const [clients, setClients] = useState<Client[]>([]);\n    const [searchTerm, setSearchTerm] = useState('');\n    const [currentPage, setCurrentPage] = useState(1);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState('');\n    const clientsPerPage = 10;\n\n    // Fetch clients from API\n    useEffect(() => {\n        const fetchClients = async () => {\n            try {\n                setLoading(true);\n                const response = await fetch('http://localhost:5001/client');\n                if (response.ok) {\n                    const data = await response.json();\n                    setClients(data);\n                } else {\n                    setError('Failed to load clients');\n                }\n            } catch (error) {\n                setError('Error fetching clients');\n                console.error('Error fetching clients:', error);\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchClients();\n    }, []);\n\n    // Filter clients based on search term\n    const filteredClients = clients.filter(client =>\n        client.firstName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        client.lastName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n        client.email.toLowerCase().includes(searchTerm.toLowerCase())\n    );\n\n    // Calculate pagination\n    const indexOfLastClient = currentPage * clientsPerPage;\n    const indexOfFirstClient = indexOfLastClient - clientsPerPage;\n    const currentClients = filteredClients.slice(indexOfFirstClient, indexOfLastClient);\n    const totalPages = Math.ceil(filteredClients.length / clientsPerPage);\n\n    const handlePageChange = (pageNumber: number) => {\n        setCurrentPage(pageNumber);\n    };\n\n    const handleEditClient = (client: Client) => {\n        // Check what field contains the ID\n        console.log('Edit client:', client);\n        console.log('Client ID:', client.id);\n        console.log('Customer ID:', client.customerId);\n        \n        // Use customerId if that's what your API returns\n        const clientId = client.customerId || client.id;\n        history.push(`/edit/${clientId}`);\n    };\n\n    const handleDeleteClient = async (id: string) => {\n        try {\n            const response = await fetch(`http://localhost:5001/client?ClientID=${id}`, {\n                method: 'DELETE',\n            });\n            \n            if (response.ok) {\n                // Remove client from state\n                setClients(clients.filter(client => \n                    (client.customerId || client.id) !== id\n                ));\n            } else {\n                setError('Failed to delete client');\n            }\n        } catch (error) {\n            setError('Error deleting client');\n            console.error('Error deleting client:', error);\n        }\n    };\n\n    const handleSearchChange = (term: string) => {\n        setSearchTerm(term);\n        setCurrentPage(1); // Reset to first page when searching\n    };\n\n    if (loading) {\n        return <div>Loading clients...</div>;\n    }\n\n    return (\n        <div>\n            <h1>Client Management</h1>\n            {error && <p style={{ color: 'red' }}>{error}</p>}\n            <SearchBar searchTerm={searchTerm} onSearchChange={handleSearchChange} />\n            <ClientList \n                clients={currentClients}\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onPageChange={handlePageChange}\n                onEditClient={handleEditClient}\n                onDeleteClient={handleDeleteClient}\n            />\n            <Pagination\n                currentPage={currentPage}\n                totalPages={totalPages}\n                onPageChange={handlePageChange}\n            />\n        </div>\n    );\n};\n\nexport default ClientListPage;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAOC,UAAU,MAAM,0BAA0B;AACjD,OAAOC,SAAS,MAAM,yBAAyB;AAC/C,OAAOC,UAAU,MAAM,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAGlD,MAAMC,cAAwB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAMC,OAAO,GAAGR,UAAU,CAAC,CAAC;EAC5B,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAW,EAAE,CAAC;EACpD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAChD,MAAM,CAACe,WAAW,EAAEC,cAAc,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;EACjD,MAAM,CAACiB,OAAO,EAAEC,UAAU,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EAC5C,MAAM,CAACmB,KAAK,EAAEC,QAAQ,CAAC,GAAGpB,QAAQ,CAAC,EAAE,CAAC;EACtC,MAAMqB,cAAc,GAAG,EAAE;;EAEzB;EACApB,SAAS,CAAC,MAAM;IACZ,MAAMqB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACAJ,UAAU,CAAC,IAAI,CAAC;QAChB,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;QAC5D,IAAID,QAAQ,CAACE,EAAE,EAAE;UACb,MAAMC,IAAI,GAAG,MAAMH,QAAQ,CAACI,IAAI,CAAC,CAAC;UAClCf,UAAU,CAACc,IAAI,CAAC;QACpB,CAAC,MAAM;UACHN,QAAQ,CAAC,wBAAwB,CAAC;QACtC;MACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;QACZC,QAAQ,CAAC,wBAAwB,CAAC;QAClCQ,OAAO,CAACT,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MACnD,CAAC,SAAS;QACND,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAEDI,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMO,eAAe,GAAGlB,OAAO,CAACmB,MAAM,CAACC,MAAM,IACzCA,MAAM,CAACC,SAAS,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrB,UAAU,CAACoB,WAAW,CAAC,CAAC,CAAC,IACjEF,MAAM,CAACI,QAAQ,CAACF,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrB,UAAU,CAACoB,WAAW,CAAC,CAAC,CAAC,IAChEF,MAAM,CAACK,KAAK,CAACH,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACrB,UAAU,CAACoB,WAAW,CAAC,CAAC,CAChE,CAAC;;EAED;EACA,MAAMI,iBAAiB,GAAGtB,WAAW,GAAGM,cAAc;EACtD,MAAMiB,kBAAkB,GAAGD,iBAAiB,GAAGhB,cAAc;EAC7D,MAAMkB,cAAc,GAAGV,eAAe,CAACW,KAAK,CAACF,kBAAkB,EAAED,iBAAiB,CAAC;EACnF,MAAMI,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACd,eAAe,CAACe,MAAM,GAAGvB,cAAc,CAAC;EAErE,MAAMwB,gBAAgB,GAAIC,UAAkB,IAAK;IAC7C9B,cAAc,CAAC8B,UAAU,CAAC;EAC9B,CAAC;EAED,MAAMC,gBAAgB,GAAIhB,MAAc,IAAK;IACzC;IACAH,OAAO,CAACoB,GAAG,CAAC,cAAc,EAAEjB,MAAM,CAAC;IACnCH,OAAO,CAACoB,GAAG,CAAC,YAAY,EAAEjB,MAAM,CAACkB,EAAE,CAAC;IACpCrB,OAAO,CAACoB,GAAG,CAAC,cAAc,EAAEjB,MAAM,CAACmB,UAAU,CAAC;;IAE9C;IACA,MAAMC,QAAQ,GAAGpB,MAAM,CAACmB,UAAU,IAAInB,MAAM,CAACkB,EAAE;IAC/CvC,OAAO,CAAC0C,IAAI,CAAC,SAASD,QAAQ,EAAE,CAAC;EACrC,CAAC;EAED,MAAME,kBAAkB,GAAG,MAAOJ,EAAU,IAAK;IAC7C,IAAI;MACA,MAAM1B,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCyB,EAAE,EAAE,EAAE;QACxEK,MAAM,EAAE;MACZ,CAAC,CAAC;MAEF,IAAI/B,QAAQ,CAACE,EAAE,EAAE;QACb;QACAb,UAAU,CAACD,OAAO,CAACmB,MAAM,CAACC,MAAM,IAC5B,CAACA,MAAM,CAACmB,UAAU,IAAInB,MAAM,CAACkB,EAAE,MAAMA,EACzC,CAAC,CAAC;MACN,CAAC,MAAM;QACH7B,QAAQ,CAAC,yBAAyB,CAAC;MACvC;IACJ,CAAC,CAAC,OAAOD,KAAK,EAAE;MACZC,QAAQ,CAAC,uBAAuB,CAAC;MACjCQ,OAAO,CAACT,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;IAClD;EACJ,CAAC;EAED,MAAMoC,kBAAkB,GAAIC,IAAY,IAAK;IACzC1C,aAAa,CAAC0C,IAAI,CAAC;IACnBxC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC;EACvB,CAAC;EAED,IAAIC,OAAO,EAAE;IACT,oBAAOV,OAAA;MAAAkD,QAAA,EAAK;IAAkB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EACxC;EAEA,oBACItD,OAAA;IAAAkD,QAAA,gBACIlD,OAAA;MAAAkD,QAAA,EAAI;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACzB1C,KAAK,iBAAIZ,OAAA;MAAGuD,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAM,CAAE;MAAAN,QAAA,EAAEtC;IAAK;MAAAuC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjDtD,OAAA,CAACH,SAAS;MAACS,UAAU,EAAEA,UAAW;MAACmD,cAAc,EAAET;IAAmB;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACzEtD,OAAA,CAACJ,UAAU;MACPQ,OAAO,EAAE4B,cAAe;MACxBxB,WAAW,EAAEA,WAAY;MACzB0B,UAAU,EAAEA,UAAW;MACvBwB,YAAY,EAAEpB,gBAAiB;MAC/BqB,YAAY,EAAEnB,gBAAiB;MAC/BoB,cAAc,EAAEd;IAAmB;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtC,CAAC,eACFtD,OAAA,CAACF,UAAU;MACPU,WAAW,EAAEA,WAAY;MACzB0B,UAAU,EAAEA,UAAW;MACvBwB,YAAY,EAAEpB;IAAiB;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACpD,EAAA,CA7GID,cAAwB;EAAA,QACVN,UAAU;AAAA;AAAAkE,EAAA,GADxB5D,cAAwB;AA+G9B,eAAeA,cAAc;AAAC,IAAA4D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}