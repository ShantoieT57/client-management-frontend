{"ast":null,"code":"export const validateEmail = email => {\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n  return emailRegex.test(email);\n};\nexport const validateSouthAfricanPhone = phone => {\n  if (!phone) return true; // Optional field\n  // South African phone number formats: +27XXXXXXXXX, 0XXXXXXXXX, XXXXXXXXX\n  const phoneRegex = /^(\\+27|0)?[1-9]\\d{8}$/;\n  return phoneRegex.test(phone.replace(/\\s/g, ''));\n};\nexport const validateSouthAfricanID = id => {\n  if (!id) return false;\n  // South African ID format: YYMMDDGGGGSAZ (13 digits)\n  const idRegex = /^\\d{13}$/;\n  if (!idRegex.test(id)) return false;\n\n  // Basic checksum validation (Luhn algorithm)\n  let sum = 0;\n  for (let i = 0; i < 12; i++) {\n    let digit = parseInt(id[i]);\n    if (i % 2 === 1) {\n      digit *= 2;\n      if (digit > 9) digit -= 9;\n    }\n    sum += digit;\n  }\n  const checkDigit = (10 - sum % 10) % 10;\n  return checkDigit === parseInt(id[12]);\n};\nexport const validatePostalCode = code => {\n  if (!code) return false;\n  return code.length >= 4 && code.length <= 10;\n};\nexport const validateDateOfBirth = date => {\n  if (!date) return false;\n  const today = new Date();\n  const birthDate = new Date(date);\n  return birthDate <= today;\n};\n\n// Comprehensive client validation function\nexport const validateClient = client => {\n  // Required field validation\n  if (!client.firstName || !client.lastName || !client.email || !client.idNumber || !client.postalCode || !client.dateOfBirth || !client.city) {\n    return {\n      isValid: false,\n      error: 'All required fields must be filled'\n    };\n  }\n\n  // Email validation\n  if (!validateEmail(client.email)) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid email address'\n    };\n  }\n\n  // Phone validation (optional)\n  if (client.phoneNumber && !validateSouthAfricanPhone(client.phoneNumber)) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid South African phone number (e.g., +27XXXXXXXXX or 0XXXXXXXXX)'\n    };\n  }\n\n  // ID number validation\n  if (!validateSouthAfricanID(client.idNumber)) {\n    return {\n      isValid: false,\n      error: 'Please enter a valid South African ID number (13 digits)'\n    };\n  }\n\n  // Postal code validation\n  if (!validatePostalCode(client.postalCode)) {\n    return {\n      isValid: false,\n      error: 'Postal code must be between 4 and 10 characters'\n    };\n  }\n\n  // Date of birth validation\n  if (!validateDateOfBirth(client.dateOfBirth)) {\n    return {\n      isValid: false,\n      error: 'Date of birth cannot be in the future'\n    };\n  }\n  return {\n    isValid: true,\n    error: ''\n  };\n};","map":{"version":3,"names":["validateEmail","email","emailRegex","test","validateSouthAfricanPhone","phone","phoneRegex","replace","validateSouthAfricanID","id","idRegex","sum","i","digit","parseInt","checkDigit","validatePostalCode","code","length","validateDateOfBirth","date","today","Date","birthDate","validateClient","client","firstName","lastName","idNumber","postalCode","dateOfBirth","city","isValid","error","phoneNumber"],"sources":["C:/Research/client-management-frontend/FrontEnd/client-management-dashboard/src/utils/validation.ts"],"sourcesContent":["export const validateEmail = (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n};\r\n\r\nexport const validateSouthAfricanPhone = (phone: string): boolean => {\r\n    if (!phone) return true; // Optional field\r\n    // South African phone number formats: +27XXXXXXXXX, 0XXXXXXXXX, XXXXXXXXX\r\n    const phoneRegex = /^(\\+27|0)?[1-9]\\d{8}$/;\r\n    return phoneRegex.test(phone.replace(/\\s/g, ''));\r\n};\r\n\r\nexport const validateSouthAfricanID = (id: string): boolean => {\r\n    if (!id) return false;\r\n    // South African ID format: YYMMDDGGGGSAZ (13 digits)\r\n    const idRegex = /^\\d{13}$/;\r\n    if (!idRegex.test(id)) return false;\r\n    \r\n    // Basic checksum validation (Luhn algorithm)\r\n    let sum = 0;\r\n    for (let i = 0; i < 12; i++) {\r\n        let digit = parseInt(id[i]);\r\n        if (i % 2 === 1) {\r\n            digit *= 2;\r\n            if (digit > 9) digit -= 9;\r\n        }\r\n        sum += digit;\r\n    }\r\n    const checkDigit = (10 - (sum % 10)) % 10;\r\n    return checkDigit === parseInt(id[12]);\r\n};\r\n\r\nexport const validatePostalCode = (code: string): boolean => {\r\n    if (!code) return false;\r\n    return code.length >= 4 && code.length <= 10;\r\n};\r\n\r\nexport const validateDateOfBirth = (date: string): boolean => {\r\n    if (!date) return false;\r\n    const today = new Date();\r\n    const birthDate = new Date(date);\r\n    return birthDate <= today;\r\n};\r\n\r\n// Comprehensive client validation function\r\nexport const validateClient = (client: {\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phoneNumber?: string;\r\n    idNumber: string;\r\n    postalCode: string;\r\n    dateOfBirth: string;\r\n    city: string;\r\n}): { isValid: boolean; error: string } => {\r\n    // Required field validation\r\n    if (!client.firstName || !client.lastName || !client.email || !client.idNumber || !client.postalCode || !client.dateOfBirth || !client.city) {\r\n        return { isValid: false, error: 'All required fields must be filled' };\r\n    }\r\n\r\n    // Email validation\r\n    if (!validateEmail(client.email)) {\r\n        return { isValid: false, error: 'Please enter a valid email address' };\r\n    }\r\n\r\n    // Phone validation (optional)\r\n    if (client.phoneNumber && !validateSouthAfricanPhone(client.phoneNumber)) {\r\n        return { isValid: false, error: 'Please enter a valid South African phone number (e.g., +27XXXXXXXXX or 0XXXXXXXXX)' };\r\n    }\r\n\r\n    // ID number validation\r\n    if (!validateSouthAfricanID(client.idNumber)) {\r\n        return { isValid: false, error: 'Please enter a valid South African ID number (13 digits)' };\r\n    }\r\n\r\n    // Postal code validation\r\n    if (!validatePostalCode(client.postalCode)) {\r\n        return { isValid: false, error: 'Postal code must be between 4 and 10 characters' };\r\n    }\r\n\r\n    // Date of birth validation\r\n    if (!validateDateOfBirth(client.dateOfBirth)) {\r\n        return { isValid: false, error: 'Date of birth cannot be in the future' };\r\n    }\r\n\r\n    return { isValid: true, error: '' };\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}